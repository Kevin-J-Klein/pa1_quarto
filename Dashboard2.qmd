---
title: "Microbiome Dashboard"
format: dashboard
editor: visual
---

## Quarto

```{r}
library(shiny)
library(shinydashboard)
library(readxl)
library(phyloseq)
library(DT)  #Paket für interaktive Tabellen
library(vegan)

options(shiny.trace = TRUE)  # Aktiviert Debug-Logging für Shiny

```

You can add options to executable code like this

```{r}

ui <- dashboardPage(
  dashboardHeader(title = "Microbiome Analysis"),
  
  dashboardSidebar(
    sidebarMenu(
      menuItem("Daten hochladen", tabName = "upload", icon = icon("file-upload")),
      menuItem("Alpha-Diversität", tabName = "alpha_diversity", icon = icon("chart-bar")),
      menuItem("Rarefaction Curves", tabName = "rarefaction", icon = icon("chart-line")),
      downloadButton("export_pdf", "Export als PDF") 
    )
  ),
  
  dashboardBody(
    tabItems(
      # Tab 1: Daten hochladen & Metadaten-Spalten auswählen
      tabItem(tabName = "upload",
        fluidRow(
          column(6, fileInput("metadata_file", "Metadata-Datei", accept = c(".xlsx", ".xls"))),
          column(6, fileInput("taxonomy_file", "Taxonomie-Datei", accept = c(".xlsx", ".xls")))
        ),
        actionButton("process_data", "Phyloseq-Objekt erstellen"),
        hr(),
        fluidRow(
          box(title = "Metadata Spalten", width = 6, DTOutput("metadata_columns")),
          box(title = "Eindeutige Werte der gewählten Spalte", width = 6, tableOutput("unique_values"))
        )
      ),
      
      # Tab 2: Alpha-Diversität
      tabItem(tabName = "alpha_diversity",
        fluidRow(
          box(title = "Alpha-Diversität", width = 12, plotOutput("richness_plot"))
        )
        #,
        # fluidRow(
        #   box(title = "Rarefaction Curves species", width = 12, plotOutput("rarefaction_plot_spec")) 
      ),
      
      # Tab 3: Rarefaction Curves
      tabItem(tabName = "rarefaction",
        fluidRow(
          box(title = "Rarefaction Curves", width = 12, height = "1000px", plotOutput("rarefaction_plot"))
        )
      )
    )
  )
)


```

```{r}

server <- function(input, output, session) {
  metadata_data <- reactiveVal(NULL)
  taxonomy_data <- reactiveVal(NULL)
  physeq_obj <- reactiveVal(NULL)  # Speichert phyloseq-Objekt
  selected_column <- reactiveVal(NULL) #Spalte für Gruppenauswahl
  unique_values <- reactiveVal(NULL)
  
# -- Daten laden und Gruppen auswählen( aus Metadaten Spalten)
  observeEvent(input$metadata_file, {
    req(input$metadata_file)
    metadata <- read_excel(input$metadata_file$datapath) |> as.data.frame()
    metadata_data(metadata)
    
    # Spaltennamen anzeigen
    output$metadata_columns <- renderDT({
      req(metadata_data())  # Stellt sicher, dass Metadaten existieren
      datatable(
        data.frame(Spaltennamen = colnames(metadata_data())), 
        selection = "single",  # Nur eine Zeile auswählbar
        options = list(dom = 't', paging = FALSE)  # Keine Paginierung, nur Tabelle
      )
    })
    
  })

  # Speichert die gewählte Spalte bei Klick
  observeEvent(input$metadata_columns_rows_selected, {
    req(input$metadata_columns_rows_selected)
    spaltenliste <- colnames(metadata_data())
    selected_column(spaltenliste[input$metadata_columns_rows_selected])
    
    print(paste("Gewählte Spalte:", selected_column()))  # Debugging
    
    #  Extrahiere und speichere eindeutige Werte
    if (!is.null(selected_column()) && selected_column() %in% names(metadata_data())) {
        print("Extrahiere eindeutige Werte...")  # Debugging
        #unique_vals <- as.vector(unique(metadata_data()[[selected_column()]]))
        unique_vals <- unique(metadata_data()[[selected_column()]])
        unique_values(unique_vals)  # Speichert die Werte in der reaktiven Variable
        print("Gespeicherte eindeutige Werte:")
        print(unique_values())  # Debugging
    } else {
        print("Fehler: Gewählte Spalte nicht in Metadaten gefunden oder NULL.")
        unique_values(NULL)  # Falls Fehler, leere Liste zurückgeben
    }
    
  })

  # Zeigt die gewählte Spalte an
  output$selected_column <- renderText({
    req(selected_column())
    paste("Ausgewählte Spalte:", selected_column())
  })
  
  # Anzeige der eindeutigen Werte
  output$unique_values <- renderTable({
    print("anzeige")
    print(unique_values())
    req(unique_values())
    data.frame(Werte = unique_values())
  })

  observeEvent(input$taxonomy_file, {
    req(input$taxonomy_file)
    df <- read_excel(input$taxonomy_file$datapath) |> as.data.frame()
    taxonomy_data(df)
  })

  # -- Phylosec Objekte erstellen
  observeEvent(input$process_data, {
    print("Button gedrückt")
    req(metadata_data(), taxonomy_data())
    
    # Metadaten laden
    metadata <- metadata_data()
    colnames(metadata)[colnames(metadata) == "SampleID...1"] <- "SampleID" # Wenn SampleID doppelt vorkommt... ToDo
    rownames(metadata) <- metadata$SampleID
    #metadata <- metadata[, -1]
    
    #OTU-Tabelle und Taxonomie
    df <- taxonomy_data()
    
    print(names(df))  # Gibt die Spaltennamen der Taxonomie-Datei aus

    # OTU-Tabelle extrahieren (nur Abundanzwerte)
    otu_table <- df[, grep("^S[0-9]+", names(df))]  # Spalten mit Sample-Namen
    rownames(otu_table) <- df$ID
    
    print(dim(otu_table))  # Gibt die Dimensionen der OTU-Tabelle aus
    print(head(otu_table)) # Zeigt die ersten Zeilen der OTU-Tabelle

    
    # Taxonomie-Tabelle extrahieren (alle Spalten bis "Haplotype")
    taxonomy <- df[, c("ID", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Haplotype")]
    rownames(taxonomy) <- taxonomy$ID
    
    #tax_ps <- tax_table(as.matrix(taxonomy_data()))
    tax_ps <- tax_table(as.matrix(taxonomy))
    
    #meta_ps <- sample_data(metadata_data())
    meta_ps <- sample_data(metadata)
    
    otu_ps <- otu_table(as.matrix(otu_table), taxa_are_rows = TRUE)
    print("otu_ps")
    
    print("Objekte erstellt")
    physeq <- phyloseq(otu_ps, tax_ps, meta_ps)
    print("physeq erstellt")
    
    physeq <- phyloseq(otu_ps, tax_ps, meta_ps)
    physeq_obj(physeq)  # Speichert phyloseq-Objekt für den Plot

    print("physeq erstellt")
  })
  

# --- Plot Alpha-Diversität ---
  output$richness_plot <- renderPlot({
    req(physeq_obj())  # Sicherstellen, dass physeq existiert
    plot_richness(physeq_obj(), measures = c("Observed", "Shannon", "Simpson"))
  })
  
# --- Rarefaction Curves ---
  
  #Plot RArfaction Curves ASV
  output$rarefaction_plot <- renderPlot({
    req(physeq_obj())  # Sicherstellen, dass physeq existiert
    
    otu_table_matrix <- as(otu_table(physeq_obj()), "matrix")  # OTU-Tabelle als Matrix konvertieren
    
    # Setze größere Margen, um mehr Platz für den Plot zu haben
    #par(mar = c(5, 5, 4, 2))  # Unten, Links, Oben, Rechts (Standard: c(5,4,4,2))
    
    rarecurve(otu_table_matrix, step = 100, col = rainbow(nrow(otu_table_matrix)), 
              label = TRUE, main = "Rarefaction Curves at ASV level")
  }, height = 1000)
  
  #   # Plot Rarefaction Curves Species
  # output$rarefaction_plot_spec <- renderPlot({
  #   req(physeq_obj())  # Sicherstellen, dass physeq existiert
  #   
  #   #Species level
  # 
  #   # OTU-Tabelle extrahieren
  #   otu_table_matrix <- as(otu_table(physeq_obj()), "matrix")
  #   
  #   
  #   # Taxonomie-Tabelle extrahieren
  #   taxonomy <- tax_table(physeq_obj())
  #   
  #   # Prüfen, ob die Species-Spalte existiert
  #   if ("Species" %in% colnames(taxonomy)) {
  #     
  #     # OTU-Tabelle nach Species aggregieren
  #     otu_species <- as.data.frame(otu_table_matrix)
  #     otu_species$Species <- taxonomy[, "Species"]
  #     
  #     # Summiere alle ASVs pro Species
  #     otu_species_agg <- aggregate(. ~ Species, data = otu_species, FUN = sum)
  #   
  #     # Species-Namen als Zeilen setzen
  #     rownames(otu_species_agg) <- otu_species_agg$Species
  #     otu_species_agg <- otu_species_agg[, -1]  # Entferne die Species-Spalte
  #   
  #     # Konvertiere zurück in eine Matrix
  #     otu_species_matrix <- as.matrix(otu_species_agg)
  #   
  #     # Rarefaction Curve für Species-Level plotten
  #     rarecurve(otu_species_matrix, step = 100, col = rainbow(nrow(otu_species_matrix)), 
  #               label = TRUE, main = "Rarefaction Curves at Species Level")
  #   
  #   } else {
  #     print("Fehler: Die Taxonomie-Tabelle enthält keine 'Species'-Spalte.")
  #   }
  # 
  # 
  # }, height = 600)
  
  
}

shinyApp(ui, server)
```

The `echo: false` option disables the printing of code (only output is displayed).
