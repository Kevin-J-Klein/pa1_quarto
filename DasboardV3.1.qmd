---
title: "DashboardV3"
author: "Nicolas & Kevin"
format:
  dashboard:
    orientation: columns
    fillable: true
    theme: cosmo
server: shiny
---

```{r setup}
#| context: setup


library(shiny)
library(shinydashboard)
library(readxl)
library(phyloseq)
library(DT)  #Paket für interaktive Tabellen
library(vegan)

library(plotly) # For interactive graphs
library(ggplot2) # Needed for creating ggplot objects

library(bslib)
library(bsicons)

options(shiny.trace = TRUE)  # Aktiviert Debug-Logging für Shiny
```

# {.sidebar}

```{r}
accordion(
    id = "sidebar_accordion", # Optional ID for the accordion
    multiple = FALSE, # Allow only one panel open at a time

    # accordion_panel(
    #     "Data Upload",
    #     icon = bs_icon("cloud-upload"),
    #     fileInput("otu_file", "1. OTU Table (.csv/.xlsx):",
    #         accept = c(".csv", ".xlsx", "text/csv"),
    #         width = "100%" 
    #     ),
    #     fileInput("metadata_file", "2. Metadata (.csv/.xlsx):",
    #         accept = c(".csv", ".xlsx", "text/csv"),
    #         width = "100%"
    #     ),
    #     # Keep sample check easily accessible after upload
    #     verbatimTextOutput("sample_check"),
    #     open = TRUE # Start with this panel open
    # ), # End Data Upload panel
    
     accordion_panel(
        "Export as PDF",
        icon = bs_icon("download"),
        radioButtons("export_format", "Export as:",
                     choices = c("html", "pdf"),
                     selected = "pdf"),
        actionButton("export_button", "Download", width = "100%")
    ) # End Export panel

) # End accordion
```

# File Upload


## Column {width="80%"}

```{r}
card(
    full_screen = TRUE,
    card_header("Data Upload"),
    layout_columns( # Use layout_columns for side-by-side inside card
        col_widths = c(6, 6), # Both columns take up 50% width each
        card(
            card_header("Upload OTU Table"),
            fileInput("otu_file", "1. OTU Table (.csv/.xlsx):",
                accept = c(".csv", ".xlsx", "text/csv"),
                width = "100%"
            )
        ),
        card(
            card_header("Upload Metadata"),
            fileInput("metadata_file", "2. Metadata (.csv/.xlsx):",
                accept = c(".csv", ".xlsx", "text/csv"),
                width = "100%"
            )
        )
    ), # End layout_columns
    verbatimTextOutput("sample_check") # Optional: show sample check
)

# Additional Card for Metadata Output
card(
    full_screen = TRUE,
    card_header("Metadata Output"),
    DTOutput("metadata_columns") # Output the metadata columns in a table
)



card(
    full_screen = TRUE,
    card_header("Group Selection"),
    layout_columns( # Use layout_columns for side-by-side inside card
        col_widths = c(6, 6), # Both columns take up 50% width each
        card(
            full_screen = TRUE,
            card_header("Metadata"),
            uiOutput("metadata_group_ui")
        ),
        card(
            card_header("Selected Groups"),
            # Bitte hier die Unique werte von der ausgwählten spalte von metadata_group_ui anzeigen
            uiOutput("selected_group_values") # Display unique values here
        )
    )
)

card(
    card_header("Selected Groups"),
    plotlyOutput("total_counts_per_group_boxplot") # Boxplot here
)

card(
    card_header("Read Counts per Sample"),
    DTOutput("read_counts_table")
)


```

```{r}
#| context: server
# -- Daten laden und Gruppen auswählen (aus Metadaten Spalten)
observeEvent(input$metadata_file, {
  req(input$metadata_file)
  metadata <- read_excel(input$metadata_file$datapath) |> as.data.frame()
  #metadata_data(metadata)
  
  # Spaltennamen anzeigen
  output$metadata_columns <- renderDT({
    #req(metadata_data())  # Stellt sicher, dass Metadaten existieren
    datatable(
      data.frame(Spaltennamen = colnames(metadata)), 
      selection = "single",  # Nur eine Zeile auswählbar
      options = list(dom = 't', paging = FALSE)  # Keine Paginierung, nur Tabelle
    )
  })
})


# --- Store Unique Values and Create Boxplot Data ---
unique_group_values <- reactive({
    req(physeq_obj(), input$metadata_group)

    selected_column <- input$metadata_group
    unique_values <- unique(sample_data(physeq_obj())[[selected_column]])
    return(unique_values)
})

boxplot_data <- reactive({
    req(physeq_obj(), input$metadata_group)

    ps <- physeq_obj()
    selected_column <- input$metadata_group

    # Calculate total counts per sample
    otu_table_matrix <- as(otu_table(ps), "matrix")
    total_counts_per_sample <- colSums(otu_table_matrix)

    # Get sample names
    sample_names <- colnames(otu_table_matrix)
    if (is.null(sample_names)) {
        sample_names <- sample_names(ps)
    }

    # Get grouping variable
    grouping_variable <- sample_data(ps)[[selected_column]]

    # Create data frame for boxplot
    boxplot_df <- data.frame(
        Sample = sample_names,
        TotalCounts = total_counts_per_sample,
        Group = grouping_variable
    )

    return(boxplot_df)
})

# Display Unique Values
output$selected_group_values <- renderUI({
  req(physeq_obj(), input$metadata_group) # Ensure phyloseq object and group selection are available

  selected_column <- input$metadata_group
  unique_values <- unique(sample_data(physeq_obj())[[selected_column]])

  # Format the unique values for display (e.g., as a bulleted list)
  value_list <- tags$ul(
    lapply(unique_values, tags$li)
  )

  tags$div(
    value_list
  )
})

```

# Alpha- Betadiversität

## Column {width="50%"}

```{r}
card(
    # full_screen = TRUE,
    # card_header("Metadata"),
    # uiOutput("metadata_group_ui")
)

card(
    full_screen = TRUE,
    card_header("Alpha Diversity (Richness Measures)"),
    plotlyOutput("richness_plot")
)
```

```{r}
card(
    full_screen = TRUE,
    card_header("Alpha Diversity"),
    layout_columns( # Use layout_columns for side-by-side inside card
        col_widths = c(12, 6), # Adjust widths as needed
        card(
            # card_header("Read Counts per Sample"),
            # DTOutput("read_counts_table")
        )
    ), # End layout_columns
    card( # Alpha diversity below the first row
        card_header("Alpha Diversity Indices"),
        plotlyOutput("richness_plot", height = "400px") # Specify height
    )
)
```

```{r}
card(
  full_screen = TRUE,
  card_header("Rarefaction Curves (ASV Level)"),
  #plotlyOutput("rarefaction_plot", height = "500px")
)
```

## Column {width="50%"}

### Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

### Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}

sliderInput("bins", "Number of bins:", 
            min = 1, max = 50, value = 30)
plotOutput("distPlot2")

```

# ASV

## Column {width="80%"}
```{r}
card(
  full_screen = TRUE,
  card_header("Rarefaction Curves (ASV Level)"),
  plotlyOutput("rarefaction_plot", height = "500px")
)
```


```{r}
card(
  full_screen = TRUE,
  card_header("Rarefaction Curves (Species Level)"),
  plotOutput("rarefaction_plot_spec", height = "500px")
)
```

```{r}
#| context: server

# --- Reactive: Phyloseq Object ---
physeq_obj <- reactive({
    # Require the file inputs themselves first
    req(input$otu_file, input$metadata_file)

    file_path <- input$otu_file$datapath
    
    #OTU Tabelle laden
    df <- read_excel(file_path)
    
    # OTU-Tabelle extrahieren (nur Abundanzwerte)
    otu_table <- df[, grep("^S[0-9]+", names(df))]  # Spalten mit Sample-Namen
    rownames(otu_table) <- df$ID

    # Taxonomie-Tabelle extrahieren (alle Spalten bis "Haplotype")
    taxonomy <- df[, c("ID", "Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Haplotype")]
    rownames(taxonomy) <- taxonomy$ID
    
    # Metadaten laden
    metadata_path <- input$metadata_file$datapath
    metadata <- read_excel(metadata_path)
    metadata <- as.data.frame(metadata) #ohne umwandlung in ein dataframe funktioniert "sample_data(metadata)" nicht korrekt
    colnames(metadata)[colnames(metadata) == "SampleID...1"] <- "SampleID"
    rownames(metadata) <- metadata$SampleID  # SampleID sollte zu den OTU-Spalten passen
    metadata <- metadata[, -1]  
    
    # Phyloseq-Objekt erstellen
    otu_ps <- otu_table(as.matrix(otu_table), taxa_are_rows = TRUE)
    tax_ps <- tax_table(as.matrix(taxonomy))
    sapply(metadata, class)
    print(metadata)
    meta_ps <- sample_data(metadata)

    # --- Create phyloseq object ---
    ps <- tryCatch(
        {
            phyloseq(otu_ps, tax_ps, meta_ps)
        },
        error = function(e) {
            showNotification(paste("Error creating phyloseq object:", e$message), type = "error", duration = 10)
            NULL
        }
    )

    validate(need(!is.null(ps), "Phyloseq object creation failed. Please check data consistency and sample ID matching."))

    # Return unfiltered object
    return(ps)
})

output$metadata_group_ui <- renderUI({
    ps <- physeq_obj()
    validate(need(!is.null(ps), "Waiting for data upload..."))
    meta_vars <- names(sample_data(ps))
    potential_factors <- meta_vars[sapply(sample_data(ps), function(x) is.character(x) || is.factor(x))]
    selected_var <- if (length(potential_factors) > 0) potential_factors[[1]] else meta_vars[[1]]
    selectInput("metadata_group", "Groups", choices = meta_vars, selected = selected_var)
})

# Basic Statistics

# --- Boxplot of Total Counts per Group ---
output$total_counts_per_group_boxplot <- renderPlotly({
    req(boxplot_data())

    p <- ggplot(boxplot_data(), aes(x = Group, y = TotalCounts)) +
        geom_boxplot() +
        labs(title = "Total Counts per Group", x = input$metadata_group, y = "Total Counts") +
        theme_minimal()

    ggplotly(p)
})

# --- Read Counts Table ---
output$read_counts_table <- renderDT({
    req(physeq_obj()) # Ensure physeq object is available

    # Get the OTU table as a matrix
    otu_table_matrix <- as(otu_table(physeq_obj()), "matrix")

    # Calculate the total reads per sample (column sums)
    read_counts <- colSums(otu_table_matrix)

    # Create a data frame with sample names and read counts
    sample_names <- colnames(otu_table_matrix)
    if (is.null(sample_names)) {
        sample_names <- sample_names(physeq_obj()) # Fallback in case colnames are missing
    }
    read_counts_df <- data.frame(Sample = sample_names, ReadCount = read_counts)

    # Render the data frame as a DataTable
    datatable(read_counts_df,
              options = list(
                  pageLength = 10, # Show 10 rows per page
                  searching = TRUE, # Enable searching
                  ordering = TRUE  # Enable sorting
              ),
              rownames = FALSE # Do not show row names
    )
})

# Alphadiversität
output$richness_plot <- renderPlotly({
  req(physeq_obj())  # Sicherstellen, dass physeq existiert
  p <- plot_richness(physeq_obj(), measures = c("Observed", "Shannon", "Simpson"))
  ggplotly(p)
})

#Plot RArfaction Curves ASV
output$rarefaction_plot <- renderPlotly({
        req(physeq_obj())

        # Convert OTU table to a matrix and print its dimensions for debugging
        otu_table_matrix <- as(otu_table(physeq_obj()), "matrix")
        dims <- dim(otu_table_matrix)
        print(paste("OTU matrix dimensions:", dims[1], "rows x", dims[2], "columns"))

        # Ensure we have sample names; if colnames are missing or empty, get them from phyloseq
        sample_names_vec <- colnames(otu_table_matrix)
        if (is.null(sample_names_vec) || length(sample_names_vec) == 0) {
            sample_names_vec <- sample_names(physeq_obj())
        }

        # Prepare a list to store rarefaction data
        rarefaction_data <- list()
        # Use a separate index for appending data frames to avoid gaps in the list
        list_index <- 1

        # Loop over samples (columns) in the OTU table
        for (i in 1:ncol(otu_table_matrix)) {
            sample_counts <- otu_table_matrix[, i]
            total <- sum(sample_counts)

            # Skip this sample if the total count is zero
            if (total == 0) next

            # Create a sequence of sampling depths (using 100 as a step if possible)
            steps <- if (total < 100) total else seq(100, total, by = 100)

            # Compute rarefied richness for each sample size using vegan::rarefy
            richness <- sapply(steps, function(s) {
                if (s > total) NA else vegan::rarefy(sample_counts, sample = s)
            })

            # Ensure the sample name exists; if not, create a default name
            sample_name <- if (i <= length(sample_names_vec)) sample_names_vec[i] else paste("Sample", i)

            df <- data.frame(
                Sample = sample_name,
                SampleSize = steps,
                Richness = richness
            )
            rarefaction_data[[list_index]] <- df
            list_index <- list_index + 1
        }

        # If no valid samples were found, return NULL (or show a message)
        if (length(rarefaction_data) == 0) {
            return(NULL)
        }

        # Combine the list of data frames into a single data frame
        rarefaction_df <- do.call(rbind, rarefaction_data)

        # Create the ggplot for rarefaction curves and convert it to an interactive plotly object
        p <- ggplot(rarefaction_df, aes(x = SampleSize, y = Richness, color = Sample)) +
            geom_line() +
            labs(title = "Rarefaction Curves at ASV Level", x = "Sample Size", y = "Richness") +
            theme_minimal()

        # ggplotly(p)
        ggplotly(p) %>%
            layout(
                xaxis = list(
                    type = "linear", # Ensure a linear scale
                    tickmode = "linear", # Use evenly spaced ticks
                    dtick = 100000, # Controls spacing between ticks (adjust as needed)
                    tickformat = ",.0f", # Format numbers with commas and no decimals
                    exponentformat = "none", # Turn off scientific notation
                    showexponent = "none"
                )
            )
    })

  # Plot Rarefaction Curves Species
output$rarefaction_plot_spec <- renderPlot({
  req(physeq_obj())  # Sicherstellen, dass physeq existiert

  #Species level
  # OTU-Tabelle extrahieren
  otu_table_matrix <- as(otu_table(physeq_obj()), "matrix")


  # Taxonomie-Tabelle extrahieren
  taxonomy <- tax_table(physeq_obj())

  # Prüfen, ob die Species-Spalte existiert
  if ("Species" %in% colnames(taxonomy)) {

    # OTU-Tabelle nach Species aggregieren
    otu_species <- as.data.frame(otu_table_matrix)
    otu_species$Species <- taxonomy[, "Species"]

    # Summiere alle ASVs pro Species
    otu_species_agg <- aggregate(. ~ Species, data = otu_species, FUN = sum)

    # Species-Namen als Zeilen setzen
    rownames(otu_species_agg) <- otu_species_agg$Species
    otu_species_agg <- otu_species_agg[, -1]  # Entferne die Species-Spalte

    # Konvertiere zurück in eine Matrix
    otu_species_matrix <- as.matrix(otu_species_agg)

    # Rarefaction Curve für Species-Level plotten
    rarecurve(otu_species_matrix, step = 100, col = rainbow(nrow(otu_species_matrix)),
              label = TRUE, main = "Rarefaction Curves at Species Level")

  } else {
    print("Fehler: Die Taxonomie-Tabelle enthält keine 'Species'-Spalte.")
  }


})
  
output$distPlot2 <- renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
})

# ------- Report Export -----------------------------------

# Ermittle das Arbeitsverzeichnis der Shiny-Anwendung
app_dir <- getwd()

observeEvent(input$export_button, {
  export_format <- input$export_format
  template_file <- file.path(app_dir, "report_template.qmd")
  report_basename <- paste0("dashboard_report_", format(Sys.time(), "%Y%m%d_%H%M%S"))
  report_filename <- paste0(report_basename, ".", tolower(export_format))
  
  if (export_format == "html") {
    output_format <- "html"
  } else if (export_format == "pdf") {
    output_format <- "pdf"
  } else {
    showNotification("Ungültiges Exportformat.", type = "error")
    return()
  }

  # Serialize and base64 encode phyloseq object
  physeq_serialized <- serialize(physeq_obj(), NULL)
  physeq_b64 <- base64enc::base64encode(physeq_serialized)

  # Define parameters to pass to Quarto
  params <- list(
    physeq_b64 = physeq_b64
  )

  print("EXPORT REPORT Quarto")
  print("Base64 encoded phyloseq object length:")
  print(nchar(physeq_b64))

  tryCatch({
    quarto::quarto_render(
      input = template_file,
      output_file = report_filename,
      execute_params = params,
      output_format = output_format,
      quiet = FALSE
    )
    
    output$download_report <- downloadHandler(
      filename = report_filename,
      contentType = if (export_format == "pdf") "application/pdf" else "text/html",
      content = function(file) {
        file.copy(report_filename, file, overwrite = TRUE)
      }
    )
  }, error = function(e) {
    showNotification(paste("Fehler beim Rendern des Berichts:", e$message), type = "error", duration = 10)
    print(e)
  })
})


# JavaScript, um den Download auszulösen
observe({
    if (!is.null(input$export_button)) {
        session$sendCustomMessage("download", list(filename = paste0("dashboard_report_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".", tolower(input$export_format))))
    }
})


```